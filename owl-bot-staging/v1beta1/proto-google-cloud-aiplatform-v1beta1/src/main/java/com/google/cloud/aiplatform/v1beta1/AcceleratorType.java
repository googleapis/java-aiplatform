// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/accelerator_type.proto

package com.google.cloud.aiplatform.v1beta1;

/**
 * <pre>
 * Represents a hardware accelerator type.
 * </pre>
 *
 * Protobuf enum {@code google.cloud.aiplatform.v1beta1.AcceleratorType}
 */
public enum AcceleratorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified accelerator type, which means no accelerator.
   * </pre>
   *
   * <code>ACCELERATOR_TYPE_UNSPECIFIED = 0;</code>
   */
  ACCELERATOR_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * Nvidia Tesla K80 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_K80 = 1;</code>
   */
  NVIDIA_TESLA_K80(1),
  /**
   * <pre>
   * Nvidia Tesla P100 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_P100 = 2;</code>
   */
  NVIDIA_TESLA_P100(2),
  /**
   * <pre>
   * Nvidia Tesla V100 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_V100 = 3;</code>
   */
  NVIDIA_TESLA_V100(3),
  /**
   * <pre>
   * Nvidia Tesla P4 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_P4 = 4;</code>
   */
  NVIDIA_TESLA_P4(4),
  /**
   * <pre>
   * Nvidia Tesla T4 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_T4 = 5;</code>
   */
  NVIDIA_TESLA_T4(5),
  /**
   * <pre>
   * Nvidia Tesla A100 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_A100 = 8;</code>
   */
  NVIDIA_TESLA_A100(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unspecified accelerator type, which means no accelerator.
   * </pre>
   *
   * <code>ACCELERATOR_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int ACCELERATOR_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Nvidia Tesla K80 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_K80 = 1;</code>
   */
  public static final int NVIDIA_TESLA_K80_VALUE = 1;
  /**
   * <pre>
   * Nvidia Tesla P100 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_P100 = 2;</code>
   */
  public static final int NVIDIA_TESLA_P100_VALUE = 2;
  /**
   * <pre>
   * Nvidia Tesla V100 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_V100 = 3;</code>
   */
  public static final int NVIDIA_TESLA_V100_VALUE = 3;
  /**
   * <pre>
   * Nvidia Tesla P4 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_P4 = 4;</code>
   */
  public static final int NVIDIA_TESLA_P4_VALUE = 4;
  /**
   * <pre>
   * Nvidia Tesla T4 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_T4 = 5;</code>
   */
  public static final int NVIDIA_TESLA_T4_VALUE = 5;
  /**
   * <pre>
   * Nvidia Tesla A100 GPU.
   * </pre>
   *
   * <code>NVIDIA_TESLA_A100 = 8;</code>
   */
  public static final int NVIDIA_TESLA_A100_VALUE = 8;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AcceleratorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AcceleratorType forNumber(int value) {
    switch (value) {
      case 0: return ACCELERATOR_TYPE_UNSPECIFIED;
      case 1: return NVIDIA_TESLA_K80;
      case 2: return NVIDIA_TESLA_P100;
      case 3: return NVIDIA_TESLA_V100;
      case 4: return NVIDIA_TESLA_P4;
      case 5: return NVIDIA_TESLA_T4;
      case 8: return NVIDIA_TESLA_A100;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AcceleratorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AcceleratorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AcceleratorType>() {
          public AcceleratorType findValueByNumber(int number) {
            return AcceleratorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.google.cloud.aiplatform.v1beta1.AcceleratorTypeProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final AcceleratorType[] VALUES = values();

  public static AcceleratorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AcceleratorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:google.cloud.aiplatform.v1beta1.AcceleratorType)
}

