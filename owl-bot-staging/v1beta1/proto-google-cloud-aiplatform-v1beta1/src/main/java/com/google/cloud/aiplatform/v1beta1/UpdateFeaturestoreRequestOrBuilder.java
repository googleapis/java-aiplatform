// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/featurestore_service.proto

package com.google.cloud.aiplatform.v1beta1;

public interface UpdateFeaturestoreRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.cloud.aiplatform.v1beta1.UpdateFeaturestoreRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Required. The Featurestore's `name` field is used to identify the Featurestore to be
   * updated.
   * Format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}`
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.Featurestore featurestore = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return Whether the featurestore field is set.
   */
  boolean hasFeaturestore();
  /**
   * <pre>
   * Required. The Featurestore's `name` field is used to identify the Featurestore to be
   * updated.
   * Format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}`
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.Featurestore featurestore = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The featurestore.
   */
  com.google.cloud.aiplatform.v1beta1.Featurestore getFeaturestore();
  /**
   * <pre>
   * Required. The Featurestore's `name` field is used to identify the Featurestore to be
   * updated.
   * Format:
   * `projects/{project}/locations/{location}/featurestores/{featurestore}`
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1beta1.Featurestore featurestore = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   */
  com.google.cloud.aiplatform.v1beta1.FeaturestoreOrBuilder getFeaturestoreOrBuilder();

  /**
   * <pre>
   * Field mask is used to specify the fields to be overwritten in the
   * Featurestore resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then only the non-empty fields present in the
   * request will be overwritten. Set the update_mask to `*` to override all
   * fields.
   * Updatable fields:
   *   * `labels`
   *   * `online_serving_config.fixed_node_count`
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2;</code>
   * @return Whether the updateMask field is set.
   */
  boolean hasUpdateMask();
  /**
   * <pre>
   * Field mask is used to specify the fields to be overwritten in the
   * Featurestore resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then only the non-empty fields present in the
   * request will be overwritten. Set the update_mask to `*` to override all
   * fields.
   * Updatable fields:
   *   * `labels`
   *   * `online_serving_config.fixed_node_count`
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2;</code>
   * @return The updateMask.
   */
  com.google.protobuf.FieldMask getUpdateMask();
  /**
   * <pre>
   * Field mask is used to specify the fields to be overwritten in the
   * Featurestore resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then only the non-empty fields present in the
   * request will be overwritten. Set the update_mask to `*` to override all
   * fields.
   * Updatable fields:
   *   * `labels`
   *   * `online_serving_config.fixed_node_count`
   * </pre>
   *
   * <code>.google.protobuf.FieldMask update_mask = 2;</code>
   */
  com.google.protobuf.FieldMaskOrBuilder getUpdateMaskOrBuilder();
}
