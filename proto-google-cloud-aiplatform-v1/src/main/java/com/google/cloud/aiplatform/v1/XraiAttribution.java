/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1/explanation.proto

package com.google.cloud.aiplatform.v1;

/**
 *
 *
 * <pre>
 * An explanation method that redistributes Integrated Gradients
 * attributions to segmented regions, taking advantage of the model's fully
 * differentiable structure. Refer to this paper for more details:
 * https://arxiv.org/abs/1906.02825
 * Supported only by image Models.
 * </pre>
 *
 * Protobuf type {@code google.cloud.aiplatform.v1.XraiAttribution}
 */
public final class XraiAttribution extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.cloud.aiplatform.v1.XraiAttribution)
    XraiAttributionOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use XraiAttribution.newBuilder() to construct.
  private XraiAttribution(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private XraiAttribution() {}

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new XraiAttribution();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.cloud.aiplatform.v1.ExplanationProto
        .internal_static_google_cloud_aiplatform_v1_XraiAttribution_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.cloud.aiplatform.v1.ExplanationProto
        .internal_static_google_cloud_aiplatform_v1_XraiAttribution_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.cloud.aiplatform.v1.XraiAttribution.class,
            com.google.cloud.aiplatform.v1.XraiAttribution.Builder.class);
  }

  public static final int STEP_COUNT_FIELD_NUMBER = 1;
  private int stepCount_;
  /**
   *
   *
   * <pre>
   * Required. The number of steps for approximating the path integral.
   * A good value to start is 50 and gradually increase until the
   * sum to diff property is met within the desired error range.
   * Valid range of its value is [1, 100], inclusively.
   * </pre>
   *
   * <code>int32 step_count = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   *
   * @return The stepCount.
   */
  @java.lang.Override
  public int getStepCount() {
    return stepCount_;
  }

  public static final int SMOOTH_GRAD_CONFIG_FIELD_NUMBER = 2;
  private com.google.cloud.aiplatform.v1.SmoothGradConfig smoothGradConfig_;
  /**
   *
   *
   * <pre>
   * Config for SmoothGrad approximation of gradients.
   * When enabled, the gradients are approximated by averaging the gradients
   * from noisy samples in the vicinity of the inputs. Adding
   * noise can help improve the computed gradients. Refer to this paper for more
   * details: https://arxiv.org/pdf/1706.03825.pdf
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
   *
   * @return Whether the smoothGradConfig field is set.
   */
  @java.lang.Override
  public boolean hasSmoothGradConfig() {
    return smoothGradConfig_ != null;
  }
  /**
   *
   *
   * <pre>
   * Config for SmoothGrad approximation of gradients.
   * When enabled, the gradients are approximated by averaging the gradients
   * from noisy samples in the vicinity of the inputs. Adding
   * noise can help improve the computed gradients. Refer to this paper for more
   * details: https://arxiv.org/pdf/1706.03825.pdf
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
   *
   * @return The smoothGradConfig.
   */
  @java.lang.Override
  public com.google.cloud.aiplatform.v1.SmoothGradConfig getSmoothGradConfig() {
    return smoothGradConfig_ == null
        ? com.google.cloud.aiplatform.v1.SmoothGradConfig.getDefaultInstance()
        : smoothGradConfig_;
  }
  /**
   *
   *
   * <pre>
   * Config for SmoothGrad approximation of gradients.
   * When enabled, the gradients are approximated by averaging the gradients
   * from noisy samples in the vicinity of the inputs. Adding
   * noise can help improve the computed gradients. Refer to this paper for more
   * details: https://arxiv.org/pdf/1706.03825.pdf
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
   */
  @java.lang.Override
  public com.google.cloud.aiplatform.v1.SmoothGradConfigOrBuilder getSmoothGradConfigOrBuilder() {
    return getSmoothGradConfig();
  }

  public static final int BLUR_BASELINE_CONFIG_FIELD_NUMBER = 3;
  private com.google.cloud.aiplatform.v1.BlurBaselineConfig blurBaselineConfig_;
  /**
   *
   *
   * <pre>
   * Config for XRAI with blur baseline.
   * When enabled, a linear path from the maximally blurred image to the input
   * image is created. Using a blurred baseline instead of zero (black image) is
   * motivated by the BlurIG approach explained here:
   * https://arxiv.org/abs/2004.03383
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
   *
   * @return Whether the blurBaselineConfig field is set.
   */
  @java.lang.Override
  public boolean hasBlurBaselineConfig() {
    return blurBaselineConfig_ != null;
  }
  /**
   *
   *
   * <pre>
   * Config for XRAI with blur baseline.
   * When enabled, a linear path from the maximally blurred image to the input
   * image is created. Using a blurred baseline instead of zero (black image) is
   * motivated by the BlurIG approach explained here:
   * https://arxiv.org/abs/2004.03383
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
   *
   * @return The blurBaselineConfig.
   */
  @java.lang.Override
  public com.google.cloud.aiplatform.v1.BlurBaselineConfig getBlurBaselineConfig() {
    return blurBaselineConfig_ == null
        ? com.google.cloud.aiplatform.v1.BlurBaselineConfig.getDefaultInstance()
        : blurBaselineConfig_;
  }
  /**
   *
   *
   * <pre>
   * Config for XRAI with blur baseline.
   * When enabled, a linear path from the maximally blurred image to the input
   * image is created. Using a blurred baseline instead of zero (black image) is
   * motivated by the BlurIG approach explained here:
   * https://arxiv.org/abs/2004.03383
   * </pre>
   *
   * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
   */
  @java.lang.Override
  public com.google.cloud.aiplatform.v1.BlurBaselineConfigOrBuilder
      getBlurBaselineConfigOrBuilder() {
    return getBlurBaselineConfig();
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (stepCount_ != 0) {
      output.writeInt32(1, stepCount_);
    }
    if (smoothGradConfig_ != null) {
      output.writeMessage(2, getSmoothGradConfig());
    }
    if (blurBaselineConfig_ != null) {
      output.writeMessage(3, getBlurBaselineConfig());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (stepCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, stepCount_);
    }
    if (smoothGradConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, getSmoothGradConfig());
    }
    if (blurBaselineConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, getBlurBaselineConfig());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.cloud.aiplatform.v1.XraiAttribution)) {
      return super.equals(obj);
    }
    com.google.cloud.aiplatform.v1.XraiAttribution other =
        (com.google.cloud.aiplatform.v1.XraiAttribution) obj;

    if (getStepCount() != other.getStepCount()) return false;
    if (hasSmoothGradConfig() != other.hasSmoothGradConfig()) return false;
    if (hasSmoothGradConfig()) {
      if (!getSmoothGradConfig().equals(other.getSmoothGradConfig())) return false;
    }
    if (hasBlurBaselineConfig() != other.hasBlurBaselineConfig()) return false;
    if (hasBlurBaselineConfig()) {
      if (!getBlurBaselineConfig().equals(other.getBlurBaselineConfig())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STEP_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getStepCount();
    if (hasSmoothGradConfig()) {
      hash = (37 * hash) + SMOOTH_GRAD_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getSmoothGradConfig().hashCode();
    }
    if (hasBlurBaselineConfig()) {
      hash = (37 * hash) + BLUR_BASELINE_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getBlurBaselineConfig().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(com.google.cloud.aiplatform.v1.XraiAttribution prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * An explanation method that redistributes Integrated Gradients
   * attributions to segmented regions, taking advantage of the model's fully
   * differentiable structure. Refer to this paper for more details:
   * https://arxiv.org/abs/1906.02825
   * Supported only by image Models.
   * </pre>
   *
   * Protobuf type {@code google.cloud.aiplatform.v1.XraiAttribution}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.cloud.aiplatform.v1.XraiAttribution)
      com.google.cloud.aiplatform.v1.XraiAttributionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.cloud.aiplatform.v1.ExplanationProto
          .internal_static_google_cloud_aiplatform_v1_XraiAttribution_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.aiplatform.v1.ExplanationProto
          .internal_static_google_cloud_aiplatform_v1_XraiAttribution_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.aiplatform.v1.XraiAttribution.class,
              com.google.cloud.aiplatform.v1.XraiAttribution.Builder.class);
    }

    // Construct using com.google.cloud.aiplatform.v1.XraiAttribution.newBuilder()
    private Builder() {}

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      stepCount_ = 0;

      if (smoothGradConfigBuilder_ == null) {
        smoothGradConfig_ = null;
      } else {
        smoothGradConfig_ = null;
        smoothGradConfigBuilder_ = null;
      }
      if (blurBaselineConfigBuilder_ == null) {
        blurBaselineConfig_ = null;
      } else {
        blurBaselineConfig_ = null;
        blurBaselineConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.cloud.aiplatform.v1.ExplanationProto
          .internal_static_google_cloud_aiplatform_v1_XraiAttribution_descriptor;
    }

    @java.lang.Override
    public com.google.cloud.aiplatform.v1.XraiAttribution getDefaultInstanceForType() {
      return com.google.cloud.aiplatform.v1.XraiAttribution.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.cloud.aiplatform.v1.XraiAttribution build() {
      com.google.cloud.aiplatform.v1.XraiAttribution result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.cloud.aiplatform.v1.XraiAttribution buildPartial() {
      com.google.cloud.aiplatform.v1.XraiAttribution result =
          new com.google.cloud.aiplatform.v1.XraiAttribution(this);
      result.stepCount_ = stepCount_;
      if (smoothGradConfigBuilder_ == null) {
        result.smoothGradConfig_ = smoothGradConfig_;
      } else {
        result.smoothGradConfig_ = smoothGradConfigBuilder_.build();
      }
      if (blurBaselineConfigBuilder_ == null) {
        result.blurBaselineConfig_ = blurBaselineConfig_;
      } else {
        result.blurBaselineConfig_ = blurBaselineConfigBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.cloud.aiplatform.v1.XraiAttribution) {
        return mergeFrom((com.google.cloud.aiplatform.v1.XraiAttribution) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.cloud.aiplatform.v1.XraiAttribution other) {
      if (other == com.google.cloud.aiplatform.v1.XraiAttribution.getDefaultInstance()) return this;
      if (other.getStepCount() != 0) {
        setStepCount(other.getStepCount());
      }
      if (other.hasSmoothGradConfig()) {
        mergeSmoothGradConfig(other.getSmoothGradConfig());
      }
      if (other.hasBlurBaselineConfig()) {
        mergeBlurBaselineConfig(other.getBlurBaselineConfig());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8:
              {
                stepCount_ = input.readInt32();

                break;
              } // case 8
            case 18:
              {
                input.readMessage(
                    getSmoothGradConfigFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 18
            case 26:
              {
                input.readMessage(
                    getBlurBaselineConfigFieldBuilder().getBuilder(), extensionRegistry);

                break;
              } // case 26
            default:
              {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private int stepCount_;
    /**
     *
     *
     * <pre>
     * Required. The number of steps for approximating the path integral.
     * A good value to start is 50 and gradually increase until the
     * sum to diff property is met within the desired error range.
     * Valid range of its value is [1, 100], inclusively.
     * </pre>
     *
     * <code>int32 step_count = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return The stepCount.
     */
    @java.lang.Override
    public int getStepCount() {
      return stepCount_;
    }
    /**
     *
     *
     * <pre>
     * Required. The number of steps for approximating the path integral.
     * A good value to start is 50 and gradually increase until the
     * sum to diff property is met within the desired error range.
     * Valid range of its value is [1, 100], inclusively.
     * </pre>
     *
     * <code>int32 step_count = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @param value The stepCount to set.
     * @return This builder for chaining.
     */
    public Builder setStepCount(int value) {

      stepCount_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. The number of steps for approximating the path integral.
     * A good value to start is 50 and gradually increase until the
     * sum to diff property is met within the desired error range.
     * Valid range of its value is [1, 100], inclusively.
     * </pre>
     *
     * <code>int32 step_count = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearStepCount() {

      stepCount_ = 0;
      onChanged();
      return this;
    }

    private com.google.cloud.aiplatform.v1.SmoothGradConfig smoothGradConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.aiplatform.v1.SmoothGradConfig,
            com.google.cloud.aiplatform.v1.SmoothGradConfig.Builder,
            com.google.cloud.aiplatform.v1.SmoothGradConfigOrBuilder>
        smoothGradConfigBuilder_;
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     *
     * @return Whether the smoothGradConfig field is set.
     */
    public boolean hasSmoothGradConfig() {
      return smoothGradConfigBuilder_ != null || smoothGradConfig_ != null;
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     *
     * @return The smoothGradConfig.
     */
    public com.google.cloud.aiplatform.v1.SmoothGradConfig getSmoothGradConfig() {
      if (smoothGradConfigBuilder_ == null) {
        return smoothGradConfig_ == null
            ? com.google.cloud.aiplatform.v1.SmoothGradConfig.getDefaultInstance()
            : smoothGradConfig_;
      } else {
        return smoothGradConfigBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    public Builder setSmoothGradConfig(com.google.cloud.aiplatform.v1.SmoothGradConfig value) {
      if (smoothGradConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        smoothGradConfig_ = value;
        onChanged();
      } else {
        smoothGradConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    public Builder setSmoothGradConfig(
        com.google.cloud.aiplatform.v1.SmoothGradConfig.Builder builderForValue) {
      if (smoothGradConfigBuilder_ == null) {
        smoothGradConfig_ = builderForValue.build();
        onChanged();
      } else {
        smoothGradConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    public Builder mergeSmoothGradConfig(com.google.cloud.aiplatform.v1.SmoothGradConfig value) {
      if (smoothGradConfigBuilder_ == null) {
        if (smoothGradConfig_ != null) {
          smoothGradConfig_ =
              com.google.cloud.aiplatform.v1.SmoothGradConfig.newBuilder(smoothGradConfig_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          smoothGradConfig_ = value;
        }
        onChanged();
      } else {
        smoothGradConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    public Builder clearSmoothGradConfig() {
      if (smoothGradConfigBuilder_ == null) {
        smoothGradConfig_ = null;
        onChanged();
      } else {
        smoothGradConfig_ = null;
        smoothGradConfigBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    public com.google.cloud.aiplatform.v1.SmoothGradConfig.Builder getSmoothGradConfigBuilder() {

      onChanged();
      return getSmoothGradConfigFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    public com.google.cloud.aiplatform.v1.SmoothGradConfigOrBuilder getSmoothGradConfigOrBuilder() {
      if (smoothGradConfigBuilder_ != null) {
        return smoothGradConfigBuilder_.getMessageOrBuilder();
      } else {
        return smoothGradConfig_ == null
            ? com.google.cloud.aiplatform.v1.SmoothGradConfig.getDefaultInstance()
            : smoothGradConfig_;
      }
    }
    /**
     *
     *
     * <pre>
     * Config for SmoothGrad approximation of gradients.
     * When enabled, the gradients are approximated by averaging the gradients
     * from noisy samples in the vicinity of the inputs. Adding
     * noise can help improve the computed gradients. Refer to this paper for more
     * details: https://arxiv.org/pdf/1706.03825.pdf
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.SmoothGradConfig smooth_grad_config = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.aiplatform.v1.SmoothGradConfig,
            com.google.cloud.aiplatform.v1.SmoothGradConfig.Builder,
            com.google.cloud.aiplatform.v1.SmoothGradConfigOrBuilder>
        getSmoothGradConfigFieldBuilder() {
      if (smoothGradConfigBuilder_ == null) {
        smoothGradConfigBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.aiplatform.v1.SmoothGradConfig,
                com.google.cloud.aiplatform.v1.SmoothGradConfig.Builder,
                com.google.cloud.aiplatform.v1.SmoothGradConfigOrBuilder>(
                getSmoothGradConfig(), getParentForChildren(), isClean());
        smoothGradConfig_ = null;
      }
      return smoothGradConfigBuilder_;
    }

    private com.google.cloud.aiplatform.v1.BlurBaselineConfig blurBaselineConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.aiplatform.v1.BlurBaselineConfig,
            com.google.cloud.aiplatform.v1.BlurBaselineConfig.Builder,
            com.google.cloud.aiplatform.v1.BlurBaselineConfigOrBuilder>
        blurBaselineConfigBuilder_;
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     *
     * @return Whether the blurBaselineConfig field is set.
     */
    public boolean hasBlurBaselineConfig() {
      return blurBaselineConfigBuilder_ != null || blurBaselineConfig_ != null;
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     *
     * @return The blurBaselineConfig.
     */
    public com.google.cloud.aiplatform.v1.BlurBaselineConfig getBlurBaselineConfig() {
      if (blurBaselineConfigBuilder_ == null) {
        return blurBaselineConfig_ == null
            ? com.google.cloud.aiplatform.v1.BlurBaselineConfig.getDefaultInstance()
            : blurBaselineConfig_;
      } else {
        return blurBaselineConfigBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    public Builder setBlurBaselineConfig(com.google.cloud.aiplatform.v1.BlurBaselineConfig value) {
      if (blurBaselineConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        blurBaselineConfig_ = value;
        onChanged();
      } else {
        blurBaselineConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    public Builder setBlurBaselineConfig(
        com.google.cloud.aiplatform.v1.BlurBaselineConfig.Builder builderForValue) {
      if (blurBaselineConfigBuilder_ == null) {
        blurBaselineConfig_ = builderForValue.build();
        onChanged();
      } else {
        blurBaselineConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    public Builder mergeBlurBaselineConfig(
        com.google.cloud.aiplatform.v1.BlurBaselineConfig value) {
      if (blurBaselineConfigBuilder_ == null) {
        if (blurBaselineConfig_ != null) {
          blurBaselineConfig_ =
              com.google.cloud.aiplatform.v1.BlurBaselineConfig.newBuilder(blurBaselineConfig_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          blurBaselineConfig_ = value;
        }
        onChanged();
      } else {
        blurBaselineConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    public Builder clearBlurBaselineConfig() {
      if (blurBaselineConfigBuilder_ == null) {
        blurBaselineConfig_ = null;
        onChanged();
      } else {
        blurBaselineConfig_ = null;
        blurBaselineConfigBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    public com.google.cloud.aiplatform.v1.BlurBaselineConfig.Builder
        getBlurBaselineConfigBuilder() {

      onChanged();
      return getBlurBaselineConfigFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    public com.google.cloud.aiplatform.v1.BlurBaselineConfigOrBuilder
        getBlurBaselineConfigOrBuilder() {
      if (blurBaselineConfigBuilder_ != null) {
        return blurBaselineConfigBuilder_.getMessageOrBuilder();
      } else {
        return blurBaselineConfig_ == null
            ? com.google.cloud.aiplatform.v1.BlurBaselineConfig.getDefaultInstance()
            : blurBaselineConfig_;
      }
    }
    /**
     *
     *
     * <pre>
     * Config for XRAI with blur baseline.
     * When enabled, a linear path from the maximally blurred image to the input
     * image is created. Using a blurred baseline instead of zero (black image) is
     * motivated by the BlurIG approach explained here:
     * https://arxiv.org/abs/2004.03383
     * </pre>
     *
     * <code>.google.cloud.aiplatform.v1.BlurBaselineConfig blur_baseline_config = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.cloud.aiplatform.v1.BlurBaselineConfig,
            com.google.cloud.aiplatform.v1.BlurBaselineConfig.Builder,
            com.google.cloud.aiplatform.v1.BlurBaselineConfigOrBuilder>
        getBlurBaselineConfigFieldBuilder() {
      if (blurBaselineConfigBuilder_ == null) {
        blurBaselineConfigBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.cloud.aiplatform.v1.BlurBaselineConfig,
                com.google.cloud.aiplatform.v1.BlurBaselineConfig.Builder,
                com.google.cloud.aiplatform.v1.BlurBaselineConfigOrBuilder>(
                getBlurBaselineConfig(), getParentForChildren(), isClean());
        blurBaselineConfig_ = null;
      }
      return blurBaselineConfigBuilder_;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.cloud.aiplatform.v1.XraiAttribution)
  }

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.v1.XraiAttribution)
  private static final com.google.cloud.aiplatform.v1.XraiAttribution DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.cloud.aiplatform.v1.XraiAttribution();
  }

  public static com.google.cloud.aiplatform.v1.XraiAttribution getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<XraiAttribution> PARSER =
      new com.google.protobuf.AbstractParser<XraiAttribution>() {
        @java.lang.Override
        public XraiAttribution parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

  public static com.google.protobuf.Parser<XraiAttribution> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<XraiAttribution> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.cloud.aiplatform.v1.XraiAttribution getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
