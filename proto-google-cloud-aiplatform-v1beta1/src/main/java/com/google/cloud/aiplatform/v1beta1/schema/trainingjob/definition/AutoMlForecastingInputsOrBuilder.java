/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/cloud/aiplatform/v1beta1/schema/trainingjob/definition/automl_forecasting.proto

package com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition;

public interface AutoMlForecastingInputsOrBuilder
    extends
    // @@protoc_insertion_point(interface_extends:google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs)
    com.google.protobuf.MessageOrBuilder {

  /**
   *
   *
   * <pre>
   * The name of the column that the model is to predict.
   * </pre>
   *
   * <code>string target_column = 1;</code>
   *
   * @return The targetColumn.
   */
  java.lang.String getTargetColumn();
  /**
   *
   *
   * <pre>
   * The name of the column that the model is to predict.
   * </pre>
   *
   * <code>string target_column = 1;</code>
   *
   * @return The bytes for targetColumn.
   */
  com.google.protobuf.ByteString getTargetColumnBytes();

  /**
   *
   *
   * <pre>
   * The name of the column that identifies the time series.
   * </pre>
   *
   * <code>string time_series_identifier_column = 2;</code>
   *
   * @return The timeSeriesIdentifierColumn.
   */
  java.lang.String getTimeSeriesIdentifierColumn();
  /**
   *
   *
   * <pre>
   * The name of the column that identifies the time series.
   * </pre>
   *
   * <code>string time_series_identifier_column = 2;</code>
   *
   * @return The bytes for timeSeriesIdentifierColumn.
   */
  com.google.protobuf.ByteString getTimeSeriesIdentifierColumnBytes();

  /**
   *
   *
   * <pre>
   * The name of the column that identifies time order in the time series.
   * </pre>
   *
   * <code>string time_column = 3;</code>
   *
   * @return The timeColumn.
   */
  java.lang.String getTimeColumn();
  /**
   *
   *
   * <pre>
   * The name of the column that identifies time order in the time series.
   * </pre>
   *
   * <code>string time_column = 3;</code>
   *
   * @return The bytes for timeColumn.
   */
  com.google.protobuf.ByteString getTimeColumnBytes();

  /**
   *
   *
   * <pre>
   * Each transformation will apply transform function to given input column.
   * And the result will be used for training.
   * When creating transformation for BigQuery Struct column, the column should
   * be flattened using "." as the delimiter.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation transformations = 4;
   * </code>
   */
  java.util.List<
          com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs
              .Transformation>
      getTransformationsList();
  /**
   *
   *
   * <pre>
   * Each transformation will apply transform function to given input column.
   * And the result will be used for training.
   * When creating transformation for BigQuery Struct column, the column should
   * be flattened using "." as the delimiter.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation transformations = 4;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs
          .Transformation
      getTransformations(int index);
  /**
   *
   *
   * <pre>
   * Each transformation will apply transform function to given input column.
   * And the result will be used for training.
   * When creating transformation for BigQuery Struct column, the column should
   * be flattened using "." as the delimiter.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation transformations = 4;
   * </code>
   */
  int getTransformationsCount();
  /**
   *
   *
   * <pre>
   * Each transformation will apply transform function to given input column.
   * And the result will be used for training.
   * When creating transformation for BigQuery Struct column, the column should
   * be flattened using "." as the delimiter.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation transformations = 4;
   * </code>
   */
  java.util.List<
          ? extends
              com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition
                  .AutoMlForecastingInputs.TransformationOrBuilder>
      getTransformationsOrBuilderList();
  /**
   *
   *
   * <pre>
   * Each transformation will apply transform function to given input column.
   * And the result will be used for training.
   * When creating transformation for BigQuery Struct column, the column should
   * be flattened using "." as the delimiter.
   * </pre>
   *
   * <code>
   * repeated .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation transformations = 4;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs
          .TransformationOrBuilder
      getTransformationsOrBuilder(int index);

  /**
   *
   *
   * <pre>
   * Objective function the model is optimizing towards. The training process
   * creates a model that optimizes the value of the objective
   * function over the validation set.
   * The supported optimization objectives:
   *   "minimize-rmse" (default) - Minimize root-mean-squared error (RMSE).
   *   "minimize-mae" - Minimize mean-absolute error (MAE).
   *   "minimize-rmsle" - Minimize root-mean-squared log error (RMSLE).
   *   "minimize-rmspe" - Minimize root-mean-squared percentage error (RMSPE).
   *   "minimize-wape-mae" - Minimize the combination of weighted absolute
   *     percentage error (WAPE) and mean-absolute-error (MAE).
   * </pre>
   *
   * <code>string optimization_objective = 5;</code>
   *
   * @return The optimizationObjective.
   */
  java.lang.String getOptimizationObjective();
  /**
   *
   *
   * <pre>
   * Objective function the model is optimizing towards. The training process
   * creates a model that optimizes the value of the objective
   * function over the validation set.
   * The supported optimization objectives:
   *   "minimize-rmse" (default) - Minimize root-mean-squared error (RMSE).
   *   "minimize-mae" - Minimize mean-absolute error (MAE).
   *   "minimize-rmsle" - Minimize root-mean-squared log error (RMSLE).
   *   "minimize-rmspe" - Minimize root-mean-squared percentage error (RMSPE).
   *   "minimize-wape-mae" - Minimize the combination of weighted absolute
   *     percentage error (WAPE) and mean-absolute-error (MAE).
   * </pre>
   *
   * <code>string optimization_objective = 5;</code>
   *
   * @return The bytes for optimizationObjective.
   */
  com.google.protobuf.ByteString getOptimizationObjectiveBytes();

  /**
   *
   *
   * <pre>
   * Required. The train budget of creating this model, expressed in milli node
   * hours i.e. 1,000 value in this field means 1 node hour.
   * The training cost of the model will not exceed this budget. The final cost
   * will be attempted to be close to the budget, though may end up being (even)
   * noticeably smaller - at the backend's discretion. This especially may
   * happen when further model training ceases to provide any improvements.
   * If the budget is set to a value known to be insufficient to train a
   * model for the given dataset, the training won't be attempted and
   * will error.
   * The train budget must be between 1,000 and 72,000 milli node hours,
   * inclusive.
   * </pre>
   *
   * <code>int64 train_budget_milli_node_hours = 6;</code>
   *
   * @return The trainBudgetMilliNodeHours.
   */
  long getTrainBudgetMilliNodeHours();

  /**
   *
   *
   * <pre>
   * Column name that should be used as the weight column.
   * Higher values in this column give more importance to the row
   * during model training. The column must have numeric values between 0 and
   * 10000 inclusively; 0 means the row is ignored for training. If weight
   * column field is not set, then all rows are assumed to have equal weight
   * of 1.
   * </pre>
   *
   * <code>string weight_column = 7;</code>
   *
   * @return The weightColumn.
   */
  java.lang.String getWeightColumn();
  /**
   *
   *
   * <pre>
   * Column name that should be used as the weight column.
   * Higher values in this column give more importance to the row
   * during model training. The column must have numeric values between 0 and
   * 10000 inclusively; 0 means the row is ignored for training. If weight
   * column field is not set, then all rows are assumed to have equal weight
   * of 1.
   * </pre>
   *
   * <code>string weight_column = 7;</code>
   *
   * @return The bytes for weightColumn.
   */
  com.google.protobuf.ByteString getWeightColumnBytes();

  /**
   *
   *
   * <pre>
   * Column names that should be used as static columns.
   * The value of these columns are static per time series.
   * </pre>
   *
   * <code>repeated string static_columns = 8;</code>
   *
   * @return A list containing the staticColumns.
   */
  java.util.List<java.lang.String> getStaticColumnsList();
  /**
   *
   *
   * <pre>
   * Column names that should be used as static columns.
   * The value of these columns are static per time series.
   * </pre>
   *
   * <code>repeated string static_columns = 8;</code>
   *
   * @return The count of staticColumns.
   */
  int getStaticColumnsCount();
  /**
   *
   *
   * <pre>
   * Column names that should be used as static columns.
   * The value of these columns are static per time series.
   * </pre>
   *
   * <code>repeated string static_columns = 8;</code>
   *
   * @param index The index of the element to return.
   * @return The staticColumns at the given index.
   */
  java.lang.String getStaticColumns(int index);
  /**
   *
   *
   * <pre>
   * Column names that should be used as static columns.
   * The value of these columns are static per time series.
   * </pre>
   *
   * <code>repeated string static_columns = 8;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the staticColumns at the given index.
   */
  com.google.protobuf.ByteString getStaticColumnsBytes(int index);

  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past only columns.
   * This column contains information for the given entity (identified by the
   * time_series_identifier_column) that is known for the past but not the
   * future (e.g. population of a city in a given year, or weather on a given
   * day).
   * </pre>
   *
   * <code>repeated string time_variant_past_only_columns = 9;</code>
   *
   * @return A list containing the timeVariantPastOnlyColumns.
   */
  java.util.List<java.lang.String> getTimeVariantPastOnlyColumnsList();
  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past only columns.
   * This column contains information for the given entity (identified by the
   * time_series_identifier_column) that is known for the past but not the
   * future (e.g. population of a city in a given year, or weather on a given
   * day).
   * </pre>
   *
   * <code>repeated string time_variant_past_only_columns = 9;</code>
   *
   * @return The count of timeVariantPastOnlyColumns.
   */
  int getTimeVariantPastOnlyColumnsCount();
  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past only columns.
   * This column contains information for the given entity (identified by the
   * time_series_identifier_column) that is known for the past but not the
   * future (e.g. population of a city in a given year, or weather on a given
   * day).
   * </pre>
   *
   * <code>repeated string time_variant_past_only_columns = 9;</code>
   *
   * @param index The index of the element to return.
   * @return The timeVariantPastOnlyColumns at the given index.
   */
  java.lang.String getTimeVariantPastOnlyColumns(int index);
  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past only columns.
   * This column contains information for the given entity (identified by the
   * time_series_identifier_column) that is known for the past but not the
   * future (e.g. population of a city in a given year, or weather on a given
   * day).
   * </pre>
   *
   * <code>repeated string time_variant_past_only_columns = 9;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the timeVariantPastOnlyColumns at the given index.
   */
  com.google.protobuf.ByteString getTimeVariantPastOnlyColumnsBytes(int index);

  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past and future columns.
   * This column contains information for the given entity (identified by the
   * key column) that is known for the past and the future
   * </pre>
   *
   * <code>repeated string time_variant_past_and_future_columns = 10;</code>
   *
   * @return A list containing the timeVariantPastAndFutureColumns.
   */
  java.util.List<java.lang.String> getTimeVariantPastAndFutureColumnsList();
  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past and future columns.
   * This column contains information for the given entity (identified by the
   * key column) that is known for the past and the future
   * </pre>
   *
   * <code>repeated string time_variant_past_and_future_columns = 10;</code>
   *
   * @return The count of timeVariantPastAndFutureColumns.
   */
  int getTimeVariantPastAndFutureColumnsCount();
  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past and future columns.
   * This column contains information for the given entity (identified by the
   * key column) that is known for the past and the future
   * </pre>
   *
   * <code>repeated string time_variant_past_and_future_columns = 10;</code>
   *
   * @param index The index of the element to return.
   * @return The timeVariantPastAndFutureColumns at the given index.
   */
  java.lang.String getTimeVariantPastAndFutureColumns(int index);
  /**
   *
   *
   * <pre>
   * Column names that should be used as time variant past and future columns.
   * This column contains information for the given entity (identified by the
   * key column) that is known for the past and the future
   * </pre>
   *
   * <code>repeated string time_variant_past_and_future_columns = 10;</code>
   *
   * @param index The index of the value to return.
   * @return The bytes of the timeVariantPastAndFutureColumns at the given index.
   */
  com.google.protobuf.ByteString getTimeVariantPastAndFutureColumnsBytes(int index);

  /**
   *
   *
   * <pre>
   * Expected difference in time granularity between rows in the data. If it is
   * not set, the period is inferred from data.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Period period = 11;
   * </code>
   *
   * @return Whether the period field is set.
   */
  boolean hasPeriod();
  /**
   *
   *
   * <pre>
   * Expected difference in time granularity between rows in the data. If it is
   * not set, the period is inferred from data.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Period period = 11;
   * </code>
   *
   * @return The period.
   */
  com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Period
      getPeriod();
  /**
   *
   *
   * <pre>
   * Expected difference in time granularity between rows in the data. If it is
   * not set, the period is inferred from data.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Period period = 11;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs
          .PeriodOrBuilder
      getPeriodOrBuilder();

  /**
   *
   *
   * <pre>
   * The number of periods offset into the future as the start of the forecast
   * window (the window of future values to predict, relative to the present.),
   * where each period is one unit of granularity as defined by the `period`
   * field above. Default to 0. Inclusive.
   * </pre>
   *
   * <code>int64 forecast_window_start = 12;</code>
   *
   * @return The forecastWindowStart.
   */
  long getForecastWindowStart();

  /**
   *
   *
   * <pre>
   * The number of periods offset into the future as the end of the forecast
   * window (the window of future values to predict, relative to the present.),
   * where each period is one unit of granularity as defined by the `period`
   * field above. Inclusive.
   * </pre>
   *
   * <code>int64 forecast_window_end = 13;</code>
   *
   * @return The forecastWindowEnd.
   */
  long getForecastWindowEnd();

  /**
   *
   *
   * <pre>
   * The number of periods offset into the past to restrict past sequence, where
   * each period is one unit of granularity as defined by the `period`. Default
   * value 0 means that it lets algorithm to define the value. Inclusive.
   * </pre>
   *
   * <code>int64 past_horizon = 14;</code>
   *
   * @return The pastHorizon.
   */
  long getPastHorizon();

  /**
   *
   *
   * <pre>
   * Configuration for exporting test set predictions to a BigQuery table. If
   * this configuration is absent, then the export is not performed.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.ExportEvaluatedDataItemsConfig export_evaluated_data_items_config = 15;
   * </code>
   *
   * @return Whether the exportEvaluatedDataItemsConfig field is set.
   */
  boolean hasExportEvaluatedDataItemsConfig();
  /**
   *
   *
   * <pre>
   * Configuration for exporting test set predictions to a BigQuery table. If
   * this configuration is absent, then the export is not performed.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.ExportEvaluatedDataItemsConfig export_evaluated_data_items_config = 15;
   * </code>
   *
   * @return The exportEvaluatedDataItemsConfig.
   */
  com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.ExportEvaluatedDataItemsConfig
      getExportEvaluatedDataItemsConfig();
  /**
   *
   *
   * <pre>
   * Configuration for exporting test set predictions to a BigQuery table. If
   * this configuration is absent, then the export is not performed.
   * </pre>
   *
   * <code>
   * .google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.ExportEvaluatedDataItemsConfig export_evaluated_data_items_config = 15;
   * </code>
   */
  com.google.cloud.aiplatform.v1beta1.schema.trainingjob.definition
          .ExportEvaluatedDataItemsConfigOrBuilder
      getExportEvaluatedDataItemsConfigOrBuilder();
}
